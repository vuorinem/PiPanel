@page "/environment"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Syncfusion.Blazor.Charts
@using PiPanel.Shared
@using PiPanel.Shared.Environment;
@attribute [Authorize]
@inject HttpClient Http

<PageTitle>Environment</PageTitle>

<div class="container">
    <h1>Environment</h1>

    <p>
        <b>Day:</b> @selectedDate.ToShortDateString()<br />
    </p>

    <p class="justify-content-center">
        <button @onclick="() => ChangeDate(-1)"><span class="oi oi-caret-left"></span> Previous day</button>
        <button @onclick="() => ChangeDate(1)">Next day <span class="oi oi-caret-right"></span></button>
    </p>

    <p>
        <button class="btn btn-secondary" @onclick="RefreshStatus">Refresh</button>
    </p>

    @if (isLoading)
    {
        <p>
            Loading...
        </p>
    }
    else
    {
        <p>
            <b>Latest temperature: </b>
            @if(@latestWithTemperature is not null){
                <span>@latestWithTemperature.Temperature °C (at @latestWithTemperature.MeasuredAt.ToShortTimeString())</span>
            } else
            {
                <span>Not available</span>
            }

            <br />

            <b>Latest humidity: </b>
            @if (latestWithHumidity is not null)
            {
                <span>@latestWithHumidity.Humidity % (at @latestWithHumidity.MeasuredAt.ToShortTimeString())</span>
            }
            else
            {
                <span>Not available</span>
            }
        </p>
    }
</div>

<SfChart>
    <ChartPrimaryXAxis IntervalType="IntervalType.Minutes" ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime"></ChartPrimaryXAxis>

    <ChartAxes>
        <ChartAxis Name="TemperatureAxis" LabelFormat="{value} °C"></ChartAxis>
        <ChartAxis Name="HumidityAxis" LabelFormat="{value} %" OpposedPosition="true"></ChartAxis>
    </ChartAxes>

    <ChartSeriesCollection>
        <ChartSeries DataSource="@environmentStatuses" XName="MeasuredAt" YName="Temperature" YAxisName="TemperatureAxis" Type="ChartSeriesType.Line"></ChartSeries>
        <ChartSeries DataSource="@environmentStatuses" XName="MeasuredAt" YName="Humidity" YAxisName="HumidityAxis" Type="ChartSeriesType.Line"></ChartSeries>
    </ChartSeriesCollection>
</SfChart>

@code {
    private DateOnly selectedDate = DateOnly.FromDateTime(DateTime.Today);
    private List<EnvironmentStatus> environmentStatuses = new();
    private EnvironmentStatus? latestWithTemperature;
    private EnvironmentStatus? latestWithHumidity;

    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await RefreshStatus();
    }

    protected async Task RefreshStatus()
    {
        environmentStatuses = await GetEnvironmentStatusesAsync(selectedDate) ?? new List<EnvironmentStatus>();
        latestWithTemperature = environmentStatuses.LastOrDefault(status => status.Temperature is not null);
        latestWithHumidity = environmentStatuses.LastOrDefault(status => status.Humidity is not null);
    }

    protected async Task ChangeDate(int daysChanged)
    {
        selectedDate = selectedDate.AddDays(daysChanged);

        await RefreshStatus();
    }

    private async Task<List<EnvironmentStatus>?> GetEnvironmentStatusesAsync(DateOnly date)
    {
        isLoading = true;

        try
        {
            return await Http.GetFromJsonAsync<List<EnvironmentStatus>>($"Environment?date={selectedDate.ToString(EnvironmentStatusNaming.DatePathFormat)}");
        }
        finally
        {
            isLoading = false;
        }
    }
}
